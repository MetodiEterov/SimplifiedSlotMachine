// <auto-generated />
namespace SlotMachineUnitTests
{
  using Microsoft.AspNetCore.Mvc;

  using SlotMachine.BisinessLayer;
  using SlotMachine.Common;
  using SlotMachine.Controllers;
  using SlotMachine.Models;

  using Xunit;

  /// <summary>
  /// UnitTests class
  /// </summary>
  public class SlotMachineUnitTests
  {
    /// <summary>
    /// _slotmachine field
    /// </summary>
    private readonly ISlotMachine _slotmachine;

    /// <summary>
    /// _homecontroller field
    /// </summary>
    private readonly HomeController _homecontroller;

    /// <summary>
    /// UnitTests constructor
    /// </summary>
    public SlotMachineUnitTests()
    {
      _slotmachine = new SlotMachine();
      _homecontroller = new HomeController(_slotmachine);
    }

    /// <summary>
    /// TestCalculateProfit_Example test method
    /// </summary>
    [Fact]
    public void TestCalculateProfit_Example()
    {
      // Arange
      SlotMachineModel testSlotMachine = new SlotMachineModel();
      ImageEntity row1 = new ImageEntity
      {
        LeftSource = ConstantsClass.SymbolImageSources[1],
        LeftCoefficent = ConstantsClass.SymbolCoefficents[1],
        MiddleSource = ConstantsClass.SymbolImageSources[0],
        MiddleCoefficent = ConstantsClass.SymbolCoefficents[0],
        RightSource = ConstantsClass.SymbolImageSources[0],
        RightCoefficent = ConstantsClass.SymbolCoefficents[0]
      };
      testSlotMachine.Sources[0] = row1;

      ImageEntity row2 = new ImageEntity
      {
        LeftSource = ConstantsClass.SymbolImageSources[0],
        LeftCoefficent = ConstantsClass.SymbolCoefficents[0],
        MiddleSource = ConstantsClass.SymbolImageSources[0],
        MiddleCoefficent = ConstantsClass.SymbolCoefficents[0],
        RightSource = ConstantsClass.SymbolImageSources[0],
        RightCoefficent = ConstantsClass.SymbolCoefficents[0]
      };
      testSlotMachine.Sources[1] = row2;

      ImageEntity row3 = new ImageEntity
      {
        LeftSource = ConstantsClass.SymbolImageSources[0],
        LeftCoefficent = ConstantsClass.SymbolCoefficents[0],
        MiddleSource = ConstantsClass.SymbolImageSources[2],
        MiddleCoefficent = ConstantsClass.SymbolCoefficents[2],
        RightSource = ConstantsClass.SymbolImageSources[1],
        RightCoefficent = ConstantsClass.SymbolCoefficents[1]
      };
      testSlotMachine.Sources[2] = row3;

      ImageEntity row4 = new ImageEntity
      {
        LeftSource = ConstantsClass.SymbolImageSources[2],
        LeftCoefficent = ConstantsClass.SymbolCoefficents[2],
        MiddleSource = ConstantsClass.SymbolImageSources[0],
        MiddleCoefficent = ConstantsClass.SymbolCoefficents[0],
        RightSource = ConstantsClass.SymbolImageSources[0],
        RightCoefficent = ConstantsClass.SymbolCoefficents[0]
      };
      testSlotMachine.Sources[3] = row4;

      testSlotMachine.Bet = 10;
      testSlotMachine.Balance = 200;

      // Act
      _slotmachine.CalculateProfit(ref testSlotMachine);

      // Assert
      Assert.Equal(20, testSlotMachine.Won);
    }

    /// <summary>
    /// IndexAction_ReturnsIndexView test method
    /// </summary>
    [Fact]
    public void IndexAction_ReturnsIndexView()
    {
      // Arange
      SlotMachineModel model = new SlotMachineModel();

      //Act
      var result = _homecontroller.Index(model) as ViewResult;

      // Assert
      // Check for the type of IActionResult that is normally
      // returned from ASP.NET Core MVC Controller classes.
      Assert.IsAssignableFrom<ViewResult>(result);
    }

    /// <summary>
    /// GetRoundNumber_InRange test method
    /// </summary>
    [Fact]
    public void GetRoundNumber_InRange()
    {
      // Arange
      int test = 0;

      // Act
      test = _slotmachine.GetRandomNumberInRange();

      // Assert
      Assert.InRange<int>(test, 0, ConstantsClass.SymbolWeights.Count);
    }
  }
}
