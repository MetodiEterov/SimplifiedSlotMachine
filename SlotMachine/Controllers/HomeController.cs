// <auto-generated />
namespace SlotMachine.Controllers
{
  using System;
  using System.Diagnostics;

  using Microsoft.AspNetCore.Mvc;
  using Microsoft.AspNetCore.Http;

  using SlotMachine.Models;
  using SlotMachine.BisinessLayer;

  /// <summary>
  /// HomeController class
  /// </summary>
  public class HomeController : Controller
  {
    private readonly ISlotMachine _slotmachine;
    /// <summary>
    /// HomeController constructor
    /// </summary>
    public HomeController(ISlotMachine slotmachine)
    {
      _slotmachine = slotmachine;
    }

    /// <summary>
    /// Index action method
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    public IActionResult Index(SlotMachineModel model = null)
    {
      SlotMachineModel bet = _slotmachine.GetNewBettingCoefficents();

      if (model.Bet != 0)
      {
        bet.Bet = model.Bet;

        _slotmachine.CalculateProfit(ref bet);

        bet.Balance = ((model.Balance - model.Bet + bet.Won) >= 0) ? Math.Round((model.Balance - model.Bet + bet.Won), 2, MidpointRounding.AwayFromZero) : 0;
        bet.Bet = (bet.Balance != 0) ? model.Bet : 0;
        bet.IsGameRunning = (bet.Balance != 0) ? model.IsGameRunning : false;
        bet.IsGameOver = (bet.Balance == 0) ? true : false;
      }

      return View(bet);
    }
    
    /// <summary>
    /// Throw error method
    /// </summary>
    /// <returns></returns>
    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    private IActionResult Error()
    {
      return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
    }
  }
}
