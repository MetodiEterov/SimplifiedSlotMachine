// <auto-generated />
namespace SlotMachine.Controllers
{
  using System;
  using System.Collections.Generic;
  using System.Diagnostics;
  using System.Linq;

  using Microsoft.AspNetCore.Mvc;
  using Microsoft.AspNetCore.Http;

  using SlotMachine.Common;
  using SlotMachine.Models;

  /// <summary>
  /// HomeController class
  /// </summary>
  public class HomeController : Controller
  {
    /// <summary>
    /// HomeController constructor
    /// </summary>
    public HomeController()
    {
    }

    /// <summary>
    /// Index action method
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    public IActionResult Index(SlotMachineModel model = null)
    {
      SlotMachineModel bet = this.GetNewBettingCoefficents();

      if (model.Bet != 0)
      {
        bet.Bet = model.Bet;

        CalculateProfit(ref bet);

        bet.Balance = ((model.Balance - model.Bet + bet.Won) >= 0) ? Math.Round((model.Balance - model.Bet + bet.Won), 2, MidpointRounding.AwayFromZero) : 0;
        bet.Bet = (bet.Balance != 0) ? model.Bet : 0;
        bet.IsGameRunning = (bet.Balance != 0) ? model.IsGameRunning : false;
        bet.IsGameOver = (bet.Balance == 0) ? true : false;
      }

      return View(bet);
    }

    /// <summary>
    /// Check if all members are equal method
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="values"></param>
    /// <returns></returns>
    public bool AllEqual<T>(params T[] values)
    {
      if (values == null || values.Length == 0)
      {
        return true;
      }

      return values.All(v => v.Equals(values[0]));
    }

    /// <summary>
    /// GetNewBets coefficents method
    /// </summary>
    /// <returns></returns>
    public SlotMachineModel GetNewBettingCoefficents()
    {
      SlotMachineModel imageSources = new SlotMachineModel();
      for (int i = 0; i < Constants.rowsNumber; i++)
      {
        int leftCoefficent = this.GetRandomNumberInRange();
        int leftSource = Constants.SymbolCoefficents.IndexOf(Constants.SymbolWeights[leftCoefficent]);

        int middleCoefficent = this.GetRandomNumberInRange();
        int middleSource = Constants.SymbolCoefficents.IndexOf(Constants.SymbolWeights[middleCoefficent]);

        int rightCoefficent = this.GetRandomNumberInRange();
        int rightSource = Constants.SymbolCoefficents.IndexOf(Constants.SymbolWeights[rightCoefficent]);

        ImageEntity source = new ImageEntity
        {
          LeftSource = Constants.SymbolImageSources[leftSource],
          LeftCoefficent = Constants.SymbolWeights[leftCoefficent],
          MiddleSource = Constants.SymbolImageSources[middleSource],
          MiddleCoefficent = Constants.SymbolWeights[middleCoefficent],
          RightSource = Constants.SymbolImageSources[rightSource],
          RightCoefficent = Constants.SymbolWeights[rightCoefficent]
        };

        imageSources.Sources[i] = source;
      }

      return imageSources;
    }

    /// <summary>
    /// GetRandomNumber in a range method
    /// </summary>
    /// <returns></returns>
    public int GetRandomNumberInRange()
    {
      Random random = new Random();
      return random.Next(0, Constants.SymbolWeights.Count);
    }

    /// <summary>
    /// CalculateProfit method
    /// </summary>
    /// <param name="bet"></param>
    public void CalculateProfit(ref SlotMachineModel bet)
    {
      double profit = 0;

      foreach (var item in bet.Sources)
      {
        double sum = Math.Round(this.SumCoefficents(item), 2);

        switch (sum)
        {
          case 0.4:
          case 0.6:
          case 0.8:
          case 2.4:
            profit += sum * bet.Bet;
            break;

          case 1.2:
            if (new List<double> { item.LeftCoefficent, item.MiddleCoefficent, item.RightCoefficent }.Find(x => x == 0.8) != 0.8)
            {
              profit += sum * bet.Bet;
            }
            break;

          case 1.8:
            if ((this.AllEqual(item.LeftCoefficent, item.MiddleCoefficent, item.RightCoefficent)))
            {
              profit += sum * bet.Bet;
            }
            break;

          case 1.6:
            if (new List<double> { item.LeftCoefficent, item.MiddleCoefficent, item.RightCoefficent }.Find(x => x == 0.4) != 0.4)
            {
              profit += sum * bet.Bet;
            }
            break;

          default:
            break;
        }

      }

      bet.Won = Math.Round(profit, 2);
    }

    /// <summary>
    /// SumCoefficents method
    /// </summary>
    /// <param name="values"></param>
    /// <returns></returns>
    private double SumCoefficents(ImageEntity coefficents)
    {
      return coefficents.LeftCoefficent + coefficents.MiddleCoefficent + coefficents.RightCoefficent;
    }

    /// <summary>
    /// Throw error method
    /// </summary>
    /// <returns></returns>
    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    private IActionResult Error()
    {
      return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
    }
  }
}
