// <auto-generated />
namespace SlotMachine.BisinessLayer
{
  using System;
  using System.Collections.Generic;
  using System.Linq;

  using global::SlotMachine.Common;
  using global::SlotMachine.Models;

  /// <summary>
  /// SlotMachine
  /// </summary>
  public class SlotMachine : ISlotMachine
  {
    /// <summary>
    /// AllEqual method
    /// </summary>
    /// <param name="values"></param>
    /// <returns></returns>
    public bool AllEqual(params double[] values)
    {
      if (values == null || values.Length == 0)
      {
        return true;
      }

      return values.All(v => v.Equals(values[0]));
    }

    /// <summary>
    /// CalculateProfit method
    /// </summary>
    /// <param name="bet"></param>
    public void CalculateProfit(ref SlotMachineModel bet)
    {
      double profit = 0;
      foreach (var item in bet.Sources)
      {
        double sum = Math.Round(this.SumCoefficents(item), 2);

        switch (sum)
        {
          case 0.4:
          case 0.6:
          case 0.8:
          case 2.4:
            profit += sum * bet.Bet;
            break;

          case 1.2:
            if (new List<double> { item.LeftCoefficent, item.MiddleCoefficent, item.RightCoefficent }.Find(x => x == 0.8) != 0.8)
            {
              profit += sum * bet.Bet;
            }
            break;

          case 1.8:
            if ((this.AllEqual(item.LeftCoefficent, item.MiddleCoefficent, item.RightCoefficent)))
            {
              profit += sum * bet.Bet;
            }
            break;

          case 1.6:
            if (new List<double> { item.LeftCoefficent, item.MiddleCoefficent, item.RightCoefficent }.Find(x => x == 0.4) != 0.4)
            {
              profit += sum * bet.Bet;
            }
            break;

          default:
            break;
        }

      }

      bet.Won = Math.Round(profit, 2);
    }

    /// <summary>
    /// GetNewBettingCoefficents method
    /// </summary>
    /// <returns></returns>
    public SlotMachineModel GetNewBettingCoefficents()
    {
      SlotMachineModel imageSources = new SlotMachineModel();
      for (int i = 0; i < ConstantsClass.rowsNumber; i++)
      {
        int leftCoefficent = this.GetRandomNumberInRange();
        int leftSource = ConstantsClass.SymbolCoefficents.IndexOf(ConstantsClass.SymbolWeights[leftCoefficent]);
        int middleCoefficent = this.GetRandomNumberInRange();
        int middleSource = ConstantsClass.SymbolCoefficents.IndexOf(ConstantsClass.SymbolWeights[middleCoefficent]);
        int rightCoefficent = this.GetRandomNumberInRange();
        int rightSource = ConstantsClass.SymbolCoefficents.IndexOf(ConstantsClass.SymbolWeights[rightCoefficent]);

        ImageEntity source = new ImageEntity
        {
          LeftSource = ConstantsClass.SymbolImageSources[leftSource],
          LeftCoefficent = ConstantsClass.SymbolWeights[leftCoefficent],
          MiddleSource = ConstantsClass.SymbolImageSources[middleSource],
          MiddleCoefficent = ConstantsClass.SymbolWeights[middleCoefficent],
          RightSource = ConstantsClass.SymbolImageSources[rightSource],
          RightCoefficent = ConstantsClass.SymbolWeights[rightCoefficent]
        };

        imageSources.Sources[i] = source;
      }

      return imageSources;
    }

    /// <summary>
    /// GetRandomNumberInRange method
    /// </summary>
    /// <returns></returns>
    public int GetRandomNumberInRange()
    {
      return new Random().Next(0, ConstantsClass.SymbolWeights.Count);
    }

    /// <summary>
    /// SumCoefficents method
    /// </summary>
    /// <param name="coefficents"></param>
    /// <returns></returns>
    public double SumCoefficents(ImageEntity coefficents)
    {
      return coefficents.LeftCoefficent + coefficents.MiddleCoefficent + coefficents.RightCoefficent;
    }
  }
}
