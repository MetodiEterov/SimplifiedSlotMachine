@model SlotMachineModel

@{
  ViewData["Title"] = "Home Page";
}

<style>

  .img-responsive {
    width: 75px;
    height: 75px;
    display: block;
    margin-top: 5px;
  }

  button {
    width: 150px;
    height: 50px;
    display: block;
  }

  #lbl1, #lbl2, #lbl3 {
    width: 150px;
    height: 50px;
    display: block;
    font-size: 14px;
  }

  .container-fluid {
    margin-top: 20px;
  }

  input {
    text-align: center;
  }

  #result {
    pointer-events: none;
  }

  .form-control {
    width: 150px;
  }

  #gameOver {
    visibility: hidden;
    position: absolute;
    z-index: 100;
    zoom: 80%;
  }

  #won, #balance {
    color: white;
    background-color: darkcyan;
  }

  #bet {
    color: white;
    background-color: #dc3545;
  }
</style>

<img src="~/images/GameOver.png" id="gameOver" />

@using (Html.BeginForm())
{
  <div class="container-fluid">

    @for (int i = 0; i < 4; i++)
    {
      <div class="row">
        <div class="col-md-2">
          <div class="thumbnail">
            <img src=@Model.Sources[i].LeftSource class="img-responsive">
          </div>
        </div>

        <div class="col-md-2">
          <div class="thumbnail">
            <img src=@Model.Sources[i].MiddleSource class="img-responsive">
          </div>
        </div>

        <div class="col-md-2">
          <div class="thumbnail">
            <img src=@Model.Sources[i].RightSource class="img-responsive">
          </div>
        </div>
      </div>
    }

  </div>

  <div class="container-fluid">
    <div class="row">

      <div class="col-md-2">
        <div class="thumbnail">
          <button class="btn btn-danger" type="submit" id="spinBtn">SPIN</button>
        </div>
      </div>

      <div class="col-md-2">
        <button class="btn btn-danger" id="lbl1">Enter stake amount:</button>
      </div>

      <div class="col-md-2">
        <button class="btn btn-danger" id="lbl2">You have won:</button>
      </div>

      <div class="col-md-2">
        <button class="btn btn-danger" id="lbl3">Current balance is:</button>
      </div>

    </div>
  </div>

  <div class="container-fluid">
    <div class="row">

      <div class="col-md-2">
      </div>

      <div class="col-md-2" id="inputField">
        <input type="text" class="form-control" value="@Model.Bet" id="bet" name="bet">
      </div>

      <div class="col-md-2" id="result">
        <input type="text" class="form-control" value="@Model.Won" id="won" name="won">
      </div>

      <div class="col-md-2">
        <input type="text" class="form-control" value="@Model.Balance" id="balance" name="balance">
      </div>

    </div>
  </div>

  @Html.Hidden("IsGameRunning", Model.IsGameRunning)
  @Html.Hidden("IsGameOver", Model.IsGameOver)
}

<script type="text/javascript">
  debugger;
  $(document).ready(function () {
    debugger;
    if ('@Model.IsGameOver' == 'True') {
      GameOver();
    }

    if (Number(document.getElementById("bet").value) !=0) {
      $("#balance").attr("readonly", true);
    }
  });

  $("#spinBtn").on("click", function (e) {
    let bet = parseFloat(document.getElementById("bet").value);
    let balance = parseFloat(document.getElementById("balance").value);

    if (isNaN(bet)) {
      document.getElementById("bet").value = 0;
      e.preventDefault();
      return false;
    } else if (balance == 0 || bet == 0 || bet > balance) {
      e.preventDefault();
      if (bet > balance) {
        document.getElementById("bet").value = document.getElementById("balance").value;
      } else {
        document.getElementById("bet").value = 0;
      }
      return false;
    }

    document.getElementById('IsGameRunning').value = true;
    document.getElementById('won').value = '0';
  });

  // Validate input to numbers only and prevent Enter key to submit the form

  $('#balance').on('keyup keypress', function (e) {
    let keyCode = e.keyCode || e.which;
    if (keyCode === 13) {
      e.preventDefault();
      return false;
    }

    let balance = document.getElementById("balance").value;
    if ('@Model.IsGameRunning' != 'True') {
      if (isNaN(balance)) {
        document.getElementById("balance").value = 0;
        document.getElementById("bet").value = 0;
      } else {
        document.getElementById("balance").value = parseFloat(document.getElementById("balance").value);
      }
    } else {
      $("#balance").attr("readonly", true);
    }
  });

  $('#bet').on('keyup keypress', function (e) {
    let keyCode = e.keyCode || e.which;
    if (keyCode === 13) {
      e.preventDefault();
      return false;
    }

    validateInput();
    compareValues();
  });

  function compareValues() {
    let balance = document.getElementById("bet").value;
    if (Number(balance) >= Number(document.getElementById("balance").value)) {
      document.getElementById("bet").value = parseFloat(document.getElementById("balance").value);
    }
  }

  function validateInput() {
    let balance = document.getElementById("bet").value;
    if (isNaN(balance)) {
      document.getElementById("bet").value = 0;
    } else {
      document.getElementById("bet").value = parseFloat(document.getElementById("bet").value);
      }
  }

  function GameOver() {
    document.getElementById("balance").value = 0;
    document.getElementById("bet").value = 0;
    $("#balance").attr("readonly", false);
    document.getElementById('IsGameRunning').value = false;
    document.getElementById('IsGameOver').value = false;
    $("#gameOver").css("visibility", "visible");
  }

  $("#gameOver").on("click", function () {
    $("#gameOver").css("visibility", "hidden");
  });

</script>
